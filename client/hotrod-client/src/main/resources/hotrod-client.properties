hotrod-servers=127.0.0.1:11311
transport-factory=org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory
force-return-value=false


##bellow is connection pooling config

#controls the maximum number of connections per server that are allocated (checked out to client threads, or idle in the pool) at one time.
#When non-positive, there is no limit to the number of connections per server. When maxActive is reached, the 
#connection pool for that server is said to be exhausted.
#The default setting for this parameter is 1.
maxActive=1

##sets a global limit on the number persistent connections that can be in circulation within the combined set of servers.
#When non-positive, there is no limit to the total number of persistent connections in circulation.
#When maxTotal is exceeded, all connections pools are exhausted. The default setting for this parameter is -1 (no limit).
maxTotal = -1

#controls the maximum number of persistent connections, per server, at any time. When negative, there is no limit to the
#number of connections that may be idle per server. The default setting for this parameter is 4.
maxIdle = 4

#Specifies what happens when asking for a connection from a server pool, and that pool is exhausted. Possible values:
# - 0 - an exception will be thrown to the calling user
# - 1 - the caller will block (invoke waits until a new or idle connections is available.
# - 2 - a new persistent connection will be created and and returned (essentially making maxActive meaningless.)
#                        If a positive maxWait value is supplied, will block for at most that many milliseconds,
#                         after which a an exception will be thrown. If maxWait is non-positive, call will block indefinitely.
#The default whenExhaustedAction setting is 1.
whenExhaustedAction = 1

#When testOnBorrow is set, the pool will attempt to validate each connection before it is returned, by sending an TCP packet to the server.
#Connections that fail to validate will be dropped from the pool, and a different connection will be taken. The default setting for this parameter is false.
testOnBorrow = false

#when testOnReturn is set, the pool will attempt to validate each connection before it is returned to the pool by sending an TCP packet to the server.
#Connections that fail to validate will be dropped from the pool. The default setting for this parameter is false.
testOnReturn = false

##Optionally, one may configure the pool to examine and possibly evict connections as they sit idle in the pool and to
#ensure that a minimum number of idle connections is maintained for each server. This is performed by an "idle object eviction" thread,
#which runs asynchronously. As of pool 1.5, the idle object evictor does not lock the pool throughout its execution.
# The idle connection eviction thread may be configured using the following attributes:

#timeBetweenEvictionRunsMillis indicates how long the eviction thread should sleep before "runs" of examining idle connections. When non-positive,
#no eviction thread will be launched. The default setting for this parameter is -1 (i.e., by default, idle connections eviction is disabled).
timeBetweenEvictionRunsMillis=-1

#minEvictableIdleTimeMillis specifies the minimum amount of time that an connection may sit idle in the pool before it is
#eligible for eviction due to idle time. When non-positive, no connection will be dropped from the pool due to idle time alone.
#This setting has no effect unless timeBetweenEvictionRunsMillis > 0. The default setting for this parameter is 30 minutes.
minEvictableIdleTimeMillis=1800000

#testWhileIdle indicates whether or not idle connections should be validated by sending an TCP packet to the server, during idle connection eviction runs.
# Connections that fail to validate will be dropped from the pool. This setting has no effect unless timeBetweenEvictionRunsMillis > 0.
# The default setting for this parameter is false.
testWhileIdle = false

#minIdle sets a target value for the minimum number of idle connections (per server) that should always be available.
#If this parameter is set to a positive number and timeBetweenEvictionRunsMillis > 0, each time the idle connection eviction thread runs,
#it will try to create enough idle instances so that there will be minIdle idle instances available for each server.
# The default setting for this parameter is 0.
minIdle = 0

#lifo determines whether or not the pools return idle connection in last-in-first-out order. False means that the pools
#behave as FIFO queues - connections are taken from idle connections pools in the order that they are returned.
#The default setting for this parameter is true.
lifo = true

## bellow is the async executor factory config

# async-executor-factory must implement org.infinispan.executors.ExecutorFactory. If not specified, defaults to org.infinispan.client.hotrod.DefaultAsyncExecutorFactory
asyn-executor-factory=org.infinispan.client.hotrod.DefaultAsyncExecutorFactory

# used as a configuration for DefaultAsyncExecutorFactory, and defined the number of threads to keep in the pool. If not specified defaults to 1.
default-executor-factory.poolSize = 1;

# queue to use for holding async requests before they are executed. Defaults to 
default-executor-factory.queueSize = 100000

consistent-hash.1=org.infinispan.client.hotrod.impl.consistenthash.ConsitentHashV1

